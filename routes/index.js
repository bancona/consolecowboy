// Generated by CoffeeScript 1.9.3
(function() {
  var Account, Particle, Snapshot, convertToSnapshotModelInstance, express, passport, prettyDate, router;

  express = require('express');

  passport = require('passport');

  prettyDate = require('pretty-date');

  Account = require('../models/account');

  Snapshot = require('../models/snapshot');

  Particle = require('../models/particle');

  router = express.Router();

  router.get('/', function(req, res) {
    res.render('index', {
      user: req.user,
      title: 'IAP Project'
    });
  });

  router.get('/register', function(req, res) {
    res.render('register', {});
  });

  router.post('/register', function(req, res) {
    Account.register(new Account({
      username: req.body.username
    }), req.body.password, function(err, account) {
      if (err) {
        res.render('register', {
          account: account
        });
      } else {
        passport.authenticate('local')(req, res, function() {
          return res.redirect('/');
        });
      }
    });
  });

  router.get('/login', function(req, res) {
    res.render('login', {
      user: req.user
    });
  });

  router.post('/login', passport.authenticate('local'), function(req, res) {
    res.redirect('/');
  });

  router.get('/logout', function(req, res) {
    req.logout();
    res.redirect('/');
  });

  router.get('/snapshots', function(req, res) {
    var user;
    user = req.user;
    if (user) {
      res.render('snapshots', {
        user: user,
        prettifyDate: prettyDate.format
      });
    } else {
      res.redirect('/');
    }
  });

  router.get('/snapshot', function(req, res) {
    var snapshot;
    if (!req.user) {
      res.redirect('/');
    }
    snapshot = ((function() {
      var j, len, ref, results;
      ref = req.user.snapshots;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        snapshot = ref[j];
        if (snapshot._id + "" === req.query.snapshotid + "") {
          results.push(snapshot);
        }
      }
      return results;
    })())[0];
    if (snapshot) {
      return res.render('snapshot', {
        user: req.user,
        particles: snapshot.particles
      });
    } else {
      return res.redirect('/');
    }
  });

  convertToSnapshotModelInstance = function(particles) {
    var i, id, particle, particleModelInstances;
    particleModelInstances = new Array(Object.keys(particles).length);
    i = 0;
    for (id in particles) {
      particle = particles[id];
      particleModelInstances[i] = new Particle({
        x: particle[0],
        y: particle[1],
        mass: particle[2],
        vx: particle[3],
        vy: particle[4]
      });
      i += 1;
    }
    return new Snapshot({
      particles: particleModelInstances
    });
  };

  router.post('/takesnapshot', function(req, res) {
    var snapshot;
    if (req.user) {
      snapshot = convertToSnapshotModelInstance(req.body);
      Account.findByIdAndUpdate(req.user._id, {
        $push: {
          snapshots: snapshot
        }
      }, {
        safe: true,
        upsert: true
      }, function(err, model) {
        if (err) {
          console.log(err);
          res.send({
            message: 'Snapshot Failed. Please try again'
          });
        } else {
          res.send({
            message: 'Snapshot Successful!'
          });
        }
      });
    } else {
      res.send({
        message: 'Snapshot Failed. Log in and try again'
      });
    }
  });

  module.exports = router;

}).call(this);
