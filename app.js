// Generated by CoffeeScript 1.9.3
(function() {
  var Account, LocalStrategy, app, bodyParser, cookieParser, express, expressSession, favicon, logger, mongoose, passport, path, ref, routes, users;

  path = require('path');

  logger = require('morgan');

  express = require('express');

  mongoose = require('mongoose');

  passport = require('passport');

  favicon = require('serve-favicon');

  bodyParser = require('body-parser');

  cookieParser = require('cookie-parser');

  expressSession = require('express-session');

  LocalStrategy = require('passport-local').Strategy;

  Account = require('./models/account');

  routes = require('./routes/index');

  users = require('./routes/users');

  app = express();

  app.set('views', path.join(__dirname, 'views'));

  app.set('view engine', 'jade');

  app.use(logger('dev'));

  app.use(bodyParser.json());

  app.use(bodyParser.urlencoded({
    extended: false
  }));

  app.use(cookieParser());

  app.use(expressSession({
    secret: 'keyboard cat',
    resave: false,
    saveUninitialized: false
  }));

  app.use(passport.initialize());

  app.use(passport.session());

  app.use(express["static"](path.join(__dirname, 'public')));

  app.use('/', routes);

  passport.use(new LocalStrategy(Account.authenticate()));

  passport.serializeUser(Account.serializeUser());

  passport.deserializeUser(Account.deserializeUser());

  mongoose.connect((ref = process.env.dburl) != null ? ref : require('./dburl'));

  app.use(function(req, res, next) {
    var err;
    err = new Error('Not Found');
    err.status = 404;
    return next(err);
  });

  if (app.get('env' === 'development')) {
    app.use(function(err, req, res, next) {
      res.status(err.status || 500);
      return res.render('error', {
        message: err.message,
        error: err
      });
    });
  }

  app.use(function(err, req, res, next) {
    res.status(err.status || 500);
    return res.render('error', {
      message: err.message,
      error: {}
    });
  });

  module.exports = app;

}).call(this);
