// Generated by CoffeeScript 1.9.3
(function() {
  var colors, config, gameContainer, getColor, render, renderer, stage,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  config = require('./config');

  stage = new PIXI.Container();

  gameContainer = new PIXI.Graphics();

  gameContainer.interactive = true;

  gameContainer.hitArea = new PIXI.Rectangle(0, 0, config.WIDTH, config.HEIGHT);

  stage.addChild(gameContainer);

  renderer = PIXI.autoDetectRenderer(config.WIDTH, config.HEIGHT);

  renderer.autoResize = true;

  document.body.appendChild(renderer.view);

  colors = {};

  getColor = function(mass) {
    if (indexOf.call(colors, mass) >= 0) {
      return colors[mass];
    } else {
      return colors[mass] = ((20 * mass) << 16) + ((8 * mass) << 8) + (8 * mass) + 0x111111;
    }
  };

  render = (function(_this) {
    return function(particleTree) {
      var drawParticles;
      gameContainer.clear();
      (drawParticles = function(index) {
        var bounds, childIndices, i, id, j, len, particle, radius, ref, ref1, x, y;
        childIndices = particleTree.getValidChildIndicesByIndex(index);
        if (childIndices.length === 0) {
          ref = particleTree.convertIndexToCoordinates(index), x = ref[0], y = ref[1];
          bounds = particleTree.bounds;
          ref1 = particleTree.nodes[index][particleTree._PARTICLES];
          for (id in ref1) {
            particle = ref1[id];
            radius = 2 + particle[2];
            if (bounds.x > x + radius || bounds.x + bounds.width < x - radius || bounds.y > y + radius || bounds.y + bounds.height < y - radius) {
              continue;
            }
            gameContainer.beginFill(getColor(particle[2]));
            gameContainer.drawCircle(particle[0], particle[1], radius);
          }
        } else {
          for (j = 0, len = childIndices.length; j < len; j++) {
            i = childIndices[j];
            drawParticles(i);
          }
        }
      })(0);
      return renderer.render(stage);
    };
  })(this);

  module.exports.render = render;

  module.exports.renderer = renderer;

  module.exports.gameContainer = gameContainer;

  module.exports.stage = stage;

}).call(this);
